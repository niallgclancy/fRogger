ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
###########################Split into training and validation sets
fset <- sample(seq(1, 2), size = nrow(frog.B), replace = T, prob = c(.8, .2))
train <- frog.B[fset == 1,]
test <- frog.B[fset == 2,]
train=as.data.frame(train)
test=as.data.frame(test)
#RandomForest - classification
###create variables
occ = as.factor(train$present)
slope = train$slope
TEMP = train$S1_93_11
ELEV = train$ELEV
CANOPY = train$CANOPY
PRECIP = train$PRECIP
BFI = train$BFI
model = occ~slope+TEMP+ELEV+CANOPY+PRECIP+BFI
frog.rf = randomForest(model)
eval.rf = eval(frog.rf)
eval.rf
varImpPlot(frog.rf)
#frog.all=frog.all%>%rename(TEMP=S1_93_11)
predictors = frog.all[,c(3:8,1,2,9,10)]
predictors$occ = NA
predictors$occ=predict(frog.rf, predictors[,c(1:6)])
##########LOOK AT PREDICTION ACCURACY on VALIDATION DATASET (TEST)
test=test%>%rename(TEMP=S1_93_11)
test$rf.predicted=NA
test$rf.predicted=predict(frog.rf, test[,c(3:8)])
test$rf.predicted=as.numeric(as.character(test$rf.predicted))
test_roc <- roc(test$present, test$rf.predicted)
auc(test_roc)#0.832 nice
test%>%
group_by(present, rf.predicted)%>%
summarise(n=length(slope))
#limit entire SDM network with super steep slopes (>16% as suggested by Isaak et al. 2025 NAJFM)
sdm=predictors%>%filter(slope<0.16)
write.csv(sdm, file = "frog_sdm.csv")
################################Look at loss and refugia in modelled distribution
sdm$TooWarm2080=NA
sdm$TooWarm2040=NA
sdm$TooWarmHIST=NA
sdm$TooWarm2080[which(sdm$S32_2080D>=13)]="TOO WARM"
sdm$TooWarm2080[which(sdm$S32_2080D>12 & sdm$S32_2080D<13)]="margCWH"
sdm$TooWarm2080[which(sdm$S32_2080D<=12)]="CWH"
sdm$TooWarmHIST[which(sdm$TEMP>=12)]="TOO WARM"
(687+522)/(687+522+69+68)
522/(522+69)
687/(687+68)
################################Look at loss and refugia in modelled distribution
sdm$TooWarm2080=NA
sdm$TooWarm2040=NA
sdm$TooWarmHIST=NA
sdm$TooWarm2080[which(sdm$S32_2080D>=13)]="TOO WARM"
sdm$TooWarm2080[which(sdm$S32_2080D>12 & sdm$S32_2080D<13)]="margCWH"
sdm$TooWarm2080[which(sdm$S32_2080D<=12)]="CWH"
sdm$TooWarmHIST[which(sdm$TEMP>=12)]="TOO WARM"
sdm$TooWarmHIST[which(sdm$TEMP>12 & sdm$TEMP<13)]="margCWH"
sdm$TooWarmHIST[which(sdm$TEMP<=12)]="CWH"
sdm$TooWarm2040[which(sdm$S30_2040D>=13)]="TOO WARM"
sdm$TooWarm2040[which(sdm$S30_2040D>12 & sdm$S30_2040D<13)]="margCWH"
sdm$TooWarm2040[which(sdm$S30_2040D<=12)]="CWH"
#Historical
sdm%>%filter(occ==1)%>%
group_by(TooWarmHIST)%>%
summarise(n=length(slope), p=length(slope)/7118) #
12522+448+1354
#Historical
sdm%>%filter(occ==1)%>%
group_by(TooWarmHIST)%>%
summarise(n=length(slope), p=length(slope)/14324) #
#2040s
sdm%>%filter(occ==1)%>%
group_by(TooWarm2040)%>%
summarise(n=length(slope), p=length(slope)/14324)
#2080s
sdm%>%filter(occ==1)%>%
group_by(TooWarm2080)%>%
summarise(n=length(slope), p=length(slope)/14324)
#Loss Calculation (Low End)
sdm%>%filter(occ==1 & TooWarmHIST!="TOO WARM")%>%
group_by(TooWarm2080)%>%
summarise(n=length(slope), p=length(slope)/6650)
5837+4704+3335
#Loss Calculation (Low End)
sdm%>%filter(occ==1 & TooWarmHIST!="TOO WARM")%>%
group_by(TooWarm2080)%>%
summarise(n=length(slope), p=length(slope)/13876)
#Loss Calculation (High End)
sdm%>%filter(occ==1 & TooWarmHIST=="CWH")%>%
group_by(TooWarm2080)%>%
summarise(n=length(slope), p=length(slope)/5915)
5837+3350+3335
#Loss Calculation (Low End)
sdm%>%filter(occ==1 & TooWarmHIST!="TOO WARM")%>%
group_by(TooWarm2080)%>%
summarise(n=length(slope), p=length(slope)/13876)
#Loss Calculation (High End)
sdm%>%filter(occ==1 & TooWarmHIST=="CWH")%>%
group_by(TooWarm2080)%>%
summarise(n=length(slope), p=length(slope)/12522)
0.268
0.268+0.266
#limit entire SDM network with super steep slopes (>16% as suggested by Isaak et al. 2025 NAJFM)
sdm=predictors%>%filter(slope<0.16 & WATERBODY==0)
#Load packages
library(randomForest)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(evaluate)
library(pROC)
#limit entire SDM network with super steep slopes (>16% as suggested by Isaak et al. 2025 NAJFM)
sdm=predictors%>%filter(slope<0.16 & WATERBODY==0)
write.csv(sdm, file = "frog_sdm.csv")
